// Code generated by MockGen. DO NOT EDIT.
// Source: internal/beer/domain/beer.go

// Package mocks_respository is a generated GoMock package.
package mocks_respository

import (
	reflect "reflect"

	domain "github.com/alemelomeza/test-ms-beer/internal/beer/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockBeerRepository is a mock of BeerRepository interface.
type MockBeerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockBeerRepositoryMockRecorder
}

// MockBeerRepositoryMockRecorder is the mock recorder for MockBeerRepository.
type MockBeerRepositoryMockRecorder struct {
	mock *MockBeerRepository
}

// NewMockBeerRepository creates a new mock instance.
func NewMockBeerRepository(ctrl *gomock.Controller) *MockBeerRepository {
	mock := &MockBeerRepository{ctrl: ctrl}
	mock.recorder = &MockBeerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBeerRepository) EXPECT() *MockBeerRepositoryMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockBeerRepository) Get(ID int64) (*domain.Beer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ID)
	ret0, _ := ret[0].(*domain.Beer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockBeerRepositoryMockRecorder) Get(ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockBeerRepository)(nil).Get), ID)
}

// List mocks base method.
func (m *MockBeerRepository) List() ([]domain.Beer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]domain.Beer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockBeerRepositoryMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockBeerRepository)(nil).List))
}

// Save mocks base method.
func (m *MockBeerRepository) Save(name, brewery, country string, price float64, currency string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", name, brewery, country, price, currency)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockBeerRepositoryMockRecorder) Save(name, brewery, country, price, currency interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockBeerRepository)(nil).Save), name, brewery, country, price, currency)
}

// MockCurrencyRepository is a mock of CurrencyRepository interface.
type MockCurrencyRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCurrencyRepositoryMockRecorder
}

// MockCurrencyRepositoryMockRecorder is the mock recorder for MockCurrencyRepository.
type MockCurrencyRepositoryMockRecorder struct {
	mock *MockCurrencyRepository
}

// NewMockCurrencyRepository creates a new mock instance.
func NewMockCurrencyRepository(ctrl *gomock.Controller) *MockCurrencyRepository {
	mock := &MockCurrencyRepository{ctrl: ctrl}
	mock.recorder = &MockCurrencyRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCurrencyRepository) EXPECT() *MockCurrencyRepositoryMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockCurrencyRepository) Get(currencyBeer, currencyBeerBox string) (float64, float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", currencyBeer, currencyBeerBox)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(float64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockCurrencyRepositoryMockRecorder) Get(currencyBeer, currencyBeerBox interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCurrencyRepository)(nil).Get), currencyBeer, currencyBeerBox)
}
